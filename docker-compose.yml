version: '3.9'

services:
  # Redis for Celery
  redis:
    image: redis:7-alpine
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 1G

  # FastAPI Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - BUILDKIT_INLINE_CACHE=1
    volumes:
      - ./:/app
      - ./credentials:/app/credentials:ro
      - uploaded_tracks:/app/uploaded_tracks
      - generated_tracks:/app/generated_tracks
      - temp_stems:/app/temp_stems
      - huggingface_cache:/root/.cache/huggingface
      - uv_cache:/root/.cache/uv
    env_file:
      - .env
    environment:
      - CELERY_BROKER_URL=redis://redis:${REDIS_PORT:-6379}/0
      - CELERY_RESULT_BACKEND=redis://redis:${REDIS_PORT:-6379}/0
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
      - HUGGINGFACE_TOKEN=${HUGGINGFACE_TOKEN}
    ports:
      - "${APP_PORT:-8000}:8000"
    depends_on:
      redis:
        condition: service_healthy
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 4G

  # Celery Worker for AI Music Processing
  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - BUILDKIT_INLINE_CACHE=1
    volumes:
      - ./:/app
      - ./credentials:/app/credentials:ro
      - uploaded_tracks:/app/uploaded_tracks
      - generated_tracks:/app/generated_tracks
      - temp_stems:/app/temp_stems
      - huggingface_cache:/root/.cache/huggingface
      - uv_cache:/root/.cache/uv
    env_file:
      - .env
    environment:
      - CELERY_BROKER_URL=redis://redis:${REDIS_PORT:-6379}/0
      - CELERY_RESULT_BACKEND=redis://redis:${REDIS_PORT:-6379}/0
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
      - HUGGINGFACE_TOKEN=${HUGGINGFACE_TOKEN}
    depends_on:
      redis:
        condition: service_healthy
      app:
        condition: service_healthy
    command: python -m celery -A app.celeryworker.worker.celery_app worker --loglevel=info
    deploy:
      resources:
        limits: 
          cpus: '4'
          memory: 8G
        reservations:
          cpus: '2'
          memory: 4G

  # Flower - Celery Monitoring Tool
  flower:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - BUILDKIT_INLINE_CACHE=1
    volumes:
      - ./:/app
      - huggingface_cache:/root/.cache/huggingface
      - uv_cache:/root/.cache/uv
    env_file:
      - .env
    environment:
      - CELERY_BROKER_URL=redis://redis:${REDIS_PORT:-6379}/0
      - CELERY_RESULT_BACKEND=redis://redis:${REDIS_PORT:-6379}/0
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
      - HUGGINGFACE_TOKEN=${HUGGINGFACE_TOKEN}
    ports:
      - "${FLOWER_PORT:-5555}:5555"
    depends_on: 
      - redis
      - celery_worker
    command: python -m celery -A app.celeryworker.worker.celery_app flower --port=5555
    deploy:
      resources:
        limits:
          memory: 2G

  # PostgreSQL Database
  db:
    image: postgres:16
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file:
      - .env
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 2G

volumes:
  redis_data:
  uploaded_tracks:
  generated_tracks:
  temp_stems:
  huggingface_cache:
  uv_cache:
  postgres_data: