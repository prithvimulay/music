from sqlalchemy import Column, Integer, String, Float, Text, DateTime, ForeignKey, Boolean, Enum
import datetime
import enum

from app.db.base import Base

class StemType(str, enum.Enum):
    """Enum for stem types"""
    BASS = "bass"
    DRUMS = "drums"
    OTHER = "other"

class Stem(Base):
    """
    Database model for individual stems generated by MusicGen-Stem.
    """
    __tablename__ = "stems"

    id = Column(Integer, primary_key=True, index=True)
    
    # Relationship to generated music
    generated_music_id = Column(Integer, ForeignKey("generated_music.id"), nullable=False)
    
    # Stem type
    stem_type = Column(String, nullable=False)  # Using String instead of Enum for better DB compatibility
    
    # File information
    filename = Column(String, nullable=False)
    gdrive_file_id = Column(String, nullable=False)
    file_size = Column(Integer, nullable=True)
    mime_type = Column(String, nullable=True, default="audio/wav")
    
    # Timestamps
    created_at = Column(DateTime, default=lambda: datetime.datetime.now(datetime.timezone.utc), nullable=False)
    updated_at = Column(DateTime, default=lambda: datetime.datetime.now(datetime.timezone.utc), 
                      onupdate=lambda: datetime.datetime.now(datetime.timezone.utc), nullable=False)
    
    # Status
    is_available = Column(Boolean, default=False)  # Whether the stem is ready for use
    
    def __repr__(self):
        return f"<Stem {self.id}: {self.stem_type}>"
